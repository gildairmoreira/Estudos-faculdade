Gildair moreira da silva / 9405

Ex01

#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int matricula;
    char sobrenome[50];
    int anoNascimento;
} Aluno;

void imprimirAlunos(Aluno *alunos, int n) {
    if (n == 0) return;
    imprimirAlunos(alunos, n - 1);
    printf("Matricula: %d, Sobrenome: %s, Ano de Nascimento: %d\n", alunos[n - 1].matricula, alunos[n - 1].sobrenome, alunos[n - 1].anoNascimento);
}

int main() {
    int numAlunos;
    
    printf("Informe o numero de alunos: ");
    scanf("%d", &numAlunos);

    Aluno *alunos = (Aluno*) malloc(numAlunos * sizeof(Aluno));
    
    if (alunos == NULL) {
        printf("Erro ao alocar memoria.\n");
        return 1;
    }

    for (int i = 0; i < numAlunos; i++) {
        printf("Aluno %d\n", i + 1);
        printf("Matricula: ");
        scanf("%d", &alunos[i].matricula);
        printf("Sobrenome: ");
        scanf("%s", alunos[i].sobrenome);
        printf("Ano de Nascimento: ");
        scanf("%d", &alunos[i].anoNascimento);
    }

    printf("\nDados dos alunos:\n");
    imprimirAlunos(alunos, numAlunos);

    free(alunos);

    return 0;
}

==============================================================

Ex02

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    int numPalavras = 10;
    char **matriz = (char **)malloc(numPalavras * sizeof(char *));
    
    if (matriz == NULL) {
        printf("Erro ao alocar memoria.\n");
        return 1;
    }

    for (int i = 0; i < numPalavras; i++) {
        matriz[i] = (char *)malloc(50 * sizeof(char));
        if (matriz[i] == NULL) {
            printf("Erro ao alocar memoria.\n");
            return 1;
        }
        printf("Digite a palavra %d: ", i + 1);
        scanf("%s", matriz[i]);
    }

    printf("\nPalavras armazenadas:\n");
    for (int i = 0; i < numPalavras; i++) {
        printf("%s\n", matriz[i]);
    }

    for (int i = 0; i < numPalavras; i++) {
        free(matriz[i]);
    }
    free(matriz);

    return 0;
}

====================================================

Ex03

#include <stdio.h>
#include <stdlib.h>

int existeNoVetor(int *vetor, int tamanho, int numero) {
    for (int i = 0; i < tamanho; i++) {
        if (vetor[i] == numero) {
            return 1;
        }
    }
    return 0;
}

int main() {
    int numerosLoteria[6];
    int numerosBilhete[6];
    int acertos = 0;

    printf("Digite os 6 numeros da loteria (entre 0 e 20, sem repetidos):\n");
    for (int i = 0; i < 6; i++) {
        int numero;
        do {
            printf("Numero %d: ", i + 1);
            scanf("%d", &numero);
        } while (numero < 0 || numero > 20 || existeNoVetor(numerosLoteria, i, numero));
        numerosLoteria[i] = numero;
    }

    printf("Digite os 6 numeros do bilhete (entre 0 e 20, sem repetidos):\n");
    for (int i = 0; i < 6; i++) {
        int numero;
        do {
            printf("Numero %d: ", i + 1);
            scanf("%d", &numero);
        } while (numero < 0 || numero > 20 || existeNoVetor(numerosBilhete, i, numero));
        numerosBilhete[i] = numero;
    }

    for (int i = 0; i < 6; i++) {
        if (existeNoVetor(numerosBilhete, 6, numerosLoteria[i])) {
            acertos++;
        }
    }

    int *numerosCorretos = (int *)malloc(acertos * sizeof(int));
    if (numerosCorretos == NULL) {
        printf("Erro ao alocar memoria.\n");
        return 1;
    }

    int indice = 0;
    for (int i = 0; i < 6; i++) {
        if (existeNoVetor(numerosBilhete, 6, numerosLoteria[i])) {
            numerosCorretos[indice++] = numerosLoteria[i];
        }
    }

    printf("\nNumeros sorteados:\n");
    for (int i = 0; i < 6; i++) {
        printf("%d ", numerosLoteria[i]);
    }

    printf("\n\nNumeros corretos:\n");
    for (int i = 0; i < acertos; i++) {
        printf("%d ", numerosCorretos[i]);
    }

    free(numerosCorretos);

    return 0;
}

========================================================

Ex04

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* alocarString(int tamanho) {
    return (char*)malloc(tamanho * sizeof(char));
}

void removerVogais(char* str) {
    int tamanho = strlen(str);
    for (int i = 0; i < tamanho; i++) {
        if (str[i] != 'a' && str[i] != 'e' && str[i] != 'i' && str[i] != 'o' && str[i] != 'u' &&
            str[i] != 'A' && str[i] != 'E' && str[i] != 'I' && str[i] != 'O' && str[i] != 'U') {
            printf("%c", str[i]);
        }
    }
    printf("\n");
}

int main() {
    int tamanho;
    
    printf("Digite o tamanho da string: ");
    scanf("%d", &tamanho);

    char* str = alocarString(tamanho + 1);
    
    if (str == NULL) {
        printf("Erro ao alocar memoria.\n");
        return 1;
    }

    printf("Digite o conteudo da string: ");
    scanf(" %[^\n]", str);

    printf("String sem vogais: ");
    removerVogais(str);

    free(str);

    return 0;
}

====================================================

Ex05


#include <stdio.h>
#include <stdlib.h>

int main() {
    int *numeros = NULL;
    int quantidade = 0;
    int numero;

    printf("Digite numeros (digite um numero negativo para parar):\n");
    
    while (1) {
        scanf("%d", &numero);
        if (numero < 0) break;
        
        int *temp = realloc(numeros, (quantidade + 1) * sizeof(int));
        if (temp == NULL) {
            printf("Erro ao alocar memoria.\n");
            free(numeros);
            return 1;
        }

        numeros = temp;
        numeros[quantidade] = numero;
        quantidade++;
    }

    printf("\nVetor lido:\n");
    for (int i = 0; i < quantidade; i++) {
        printf("%d ", numeros[i]);
    }
    printf("\n");

    free(numeros);

    return 0;
}


===========================================================

Ex06

#include <stdio.h>
#include <stdlib.h>

int main() {
    int *vetor = (int *)calloc(500, sizeof(int));

    if (vetor == NULL) {
        printf("Erro ao alocar memoria.\n");
        return 1;
    }

    int zeros = 0;
    for (int i = 0; i < 500; i++) {
        if (vetor[i] == 0) {
            zeros++;
        }
    }

    if (zeros == 500) {
        printf("Todos os 500 valores foram inicializados com zero.\n");
    } else {
        printf("Nem todos os valores foram inicializados com zero.\n");
    }

    for (int i = 0; i < 500; i++) {
        vetor[i] = i;
    }

    printf("\nOs 10 primeiros elementos:\n");
    for (int i = 0; i < 10; i++) {
        printf("%d ", vetor[i]);
    }

    printf("\n\nOs 10 ultimos elementos:\n");
    for (int i = 490; i < 500; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");

    free(vetor);

    return 0;
}

======================================================

Ex07

#include <stdio.h>

unsigned long long hiperfatorial(int n) {
    if (n == 1) {
        return 1;
    }
    return (unsigned long long)pow(n, n) * hiperfatorial(n - 1);
}

int main() {
    int n;
    
    printf("Digite um numero inteiro positivo: ");
    scanf("%d", &n);

    if (n < 1) {
        printf("Numero invalido.\n");
        return 1;
    }

    printf("Hiperfatorial de %d: %llu\n", n, hiperfatorial(n));

    return 0;
}

==============================================================

Ex08

#include <stdio.h>

int mdc(int x, int y) {
    if (y == 0) {
        return x;
    }
    return mdc(y, x % y);
}

int main() {
    int x, y;

    printf("Digite dois numeros inteiros: ");
    scanf("%d %d", &x, &y);

    printf("O MDC de %d e %d e: %d\n", x, y, mdc(x, y));

    return 0;
}

=============================================================

Ex09

#include <stdio.h>

int maiorValor(int vetor[], int tamanho) {
    if (tamanho == 1) {
        return vetor[0];
    }
    
    int valorRecursivo = maiorValor(vetor, tamanho - 1);
    
    if (vetor[tamanho - 1] > valorRecursivo) {
        return vetor[tamanho - 1];
    } else {
        return valorRecursivo;
    }
}

int main() {
    int vetor[3];

    printf("Digite 3 numeros inteiros:\n");
    for (int i = 0; i < 3; i++) {
        printf("Numero %d: ", i + 1);
        scanf("%d", &vetor[i]);
    }

    int maior = maiorValor(vetor, 3);
    
    printf("O maior valor no vetor e: %d\n", maior);

    return 0;
}
