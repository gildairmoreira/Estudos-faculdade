Gildair Moreira da Silva / 9405

Ex01

#include <stdio.h>

int main() {
    int var1, var2;

    printf("Digite o valor da primeira variavel: ");
    scanf("%d", &var1);
    
    printf("Digite o valor da segunda variavel: ");
    scanf("%d", &var2);

    if (&var1 > &var2) {
        printf("Conteudo da variavel com maior endereco: %d\n", var1);
    } else {
        printf("Conteudo da variavel com maior endereco: %d\n", var2);
    }

    return 0;
}


Ex02

#include <stdio.h>

void ordenar(int *a, int *b) {
    if (*a < *b) {
        int temp = *a;
        *a = *b;
        *b = temp;
    }
}

int main() {
    int x, y;
    
    scanf("%d %d", &x, &y);
    
    ordenar(&x, &y);
    
    printf("%d %d\n", x, y);
    
    return 0;
}


Ex03

#include <stdio.h>

void maiorEContagem(int arr[], int n, int *maior, int *contagem) {
    *maior = arr[0];
    *contagem = 1;
    
    for (int i = 1; i < n; i++) {
        if (arr[i] > *maior) {
            *maior = arr[i];
            *contagem = 1;
        } else if (arr[i] == *maior) {
            (*contagem)++;
        }
    }
}

int main() {
    int arr[] = {5, 2, 15, 3, 7, 15, 8, 6, 15};
    int n = sizeof(arr) / sizeof(arr[0]);
    int maior, contagem;
    
    maiorEContagem(arr, n, &maior, &contagem);
    
    printf("Maior elemento: %d\n", maior);
    printf("Numero de ocorrencias: %d\n", contagem);
    
    return 0;
}


Ex04

#include <stdio.h>

int negativos(float *vet, int N) {
    int count = 0;
    for (int i = 0; i < N; i++) {
        if (vet[i] < 0) {
            count++;
        }
    }
    return count;
}

int main() {
    float arr[] = {3.5, -2.1, 0.0, -7.8, 4.2, -5.0};
    int N = sizeof(arr) / sizeof(arr[0]);
    
    int num_negativos = negativos(arr, N);
    
    printf("Numero de valores negativos: %d\n", num_negativos);
    
    return 0;
}


Ex05

#include <stdio.h>
#include <math.h>

int raizes(float A, float B, float C, float *X1, float *X2) {
    float delta = B * B - 4 * A * C;

    if (delta < 0) {
        return 0;
    } else if (delta == 0) {
        *X1 = -B / (2 * A);
        return 1;
    } else {
        *X1 = (-B + sqrt(delta)) / (2 * A);
        *X2 = (-B - sqrt(delta)) / (2 * A);
        return 2;
    }
}

int main() {
    float A, B, C, X1, X2;
    int num_raizes;
    
    scanf("%f %f %f", &A, &B, &C);
    
    if (A == 0) {
        printf("A deve ser diferente de zero.\n");
        return 1;
    }
    
    num_raizes = raizes(A, B, C, &X1, &X2);
    
    if (num_raizes == 0) {
        printf("Nao existem raizes reais.\n");
    } else if (num_raizes == 1) {
        printf("Existe uma raiz real: %.2f\n", X1);
    } else {
        printf("Existem duas raizes reais: %.2f e %.2f\n", X1, X2);
    }
    
    return 0;
}


Ex06

#include <stdio.h>
#include <stdlib.h>

int main() {
    int *vetor;
    int tamanho;

    printf("Digite o tamanho do vetor: ");
    scanf("%d", &tamanho);

    vetor = (int*) malloc(tamanho * sizeof(int));

    if (vetor == NULL) {
        printf("Erro ao alocar memoria.\n");
        return 1;
    }

    for (int i = 0; i < tamanho; i++) {
        printf("Digite o valor para a posicao %d: ", i);
        scanf("%d", &vetor[i]);
    }

    printf("Valores do vetor:\n");
    for (int i = 0; i < tamanho; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");

    free(vetor);

    return 0;
}


Ex07

#include <stdio.h>
#include <stdlib.h>

int main() {
    int *memoria;
    int tamanho_bytes, tamanho_memoria;
    int opcao, posicao, valor;

    printf("Digite o tamanho da memoria (em bytes, multiplo de %lu): ", sizeof(int));
    scanf("%d", &tamanho_bytes);

    if (tamanho_bytes % sizeof(int) != 0) {
        printf("O tamanho deve ser multiplo de %lu bytes.\n", sizeof(int));
        return 1;
    }

    tamanho_memoria = tamanho_bytes / sizeof(int);
    memoria = (int*) malloc(tamanho_memoria * sizeof(int));

    if (memoria == NULL) {
        printf("Erro ao alocar memoria.\n");
        return 1;
    }

    for (int i = 0; i < tamanho_memoria; i++) {
        memoria[i] = 0;
    }

    do {
        printf("\nMenu:\n");
        printf("1 - Inserir valor em uma posicao\n");
        printf("2 - Consultar valor em uma posicao\n");
        printf("0 - Sair\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);

        switch(opcao) {
            case 1:
                printf("Digite a posicao (0 a %d): ", tamanho_memoria - 1);
                scanf("%d", &posicao);

                if (posicao < 0 || posicao >= tamanho_memoria) {
                    printf("Posicao invalida!\n");
                } else {
                    printf("Digite o valor a ser inserido: ");
                    scanf("%d", &valor);
                    memoria[posicao] = valor;
                    printf("Valor %d inserido na posicao %d.\n", valor, posicao);
                }
                break;

            case 2:
                printf("Digite a posicao (0 a %d): ", tamanho_memoria - 1);
                scanf("%d", &posicao);

                if (posicao < 0 || posicao >= tamanho_memoria) {
                    printf("Posicao invalida!\n");
                } else {
                    printf("Valor na posicao %d: %d\n", posicao, memoria[posicao]);
                }
                break;

            case 0:
                printf("Saindo...\n");
                break;

            default:
                printf("Opcao invalida!\n");
        }

    } while (opcao != 0);

    free(memoria);

    return 0;
}


Ex08

#include <stdio.h>
#include <stdlib.h>

int main() {
    int N, M;

    printf("Digite o numero de linhas (N): ");
    scanf("%d", &N);
    printf("Digite o numero de colunas (M): ");
    scanf("%d", &M);

    int **matriz = (int **)malloc(N * sizeof(int *));
    for (int i = 0; i < N; i++) {
        matriz[i] = (int *)malloc(M * sizeof(int));
    }

    int **transposta = (int **)malloc(M * sizeof(int *));
    for (int i = 0; i < M; i++) {
        transposta[i] = (int *)malloc(N * sizeof(int));
    }

    printf("Digite os elementos da matriz %d x %d:\n", N, M);
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            printf("Elemento [%d][%d]: ", i, j);
            scanf("%d", &matriz[i][j]);
            transposta[j][i] = matriz[i][j]; // Construindo a transposta
        }
    }

    printf("\nMatriz original (%d x %d):\n", N, M);
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }

    printf("\nMatriz transposta (%d x %d):\n", M, N);
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", transposta[i][j]);
        }
        printf("\n");
    }

    for (int i = 0; i < N; i++) {
        free(matriz[i]);
    }
    free(matriz);

    for (int i = 0; i < M; i++) {
        free(transposta[i]);
    }
    free(transposta);

    return 0;
}


Ex09

#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int matricula;
    char sobrenome[50];
    int ano_nascimento;
} Aluno;

int main() {
    int num_alunos;
    Aluno *alunos;

    printf("Digite o numero de alunos: ");
    scanf("%d", &num_alunos);

    alunos = (Aluno *)malloc(num_alunos * sizeof(Aluno));

    if (alunos == NULL) {
        printf("Erro ao alocar memoria.\n");
        return 1;
    }

    for (int i = 0; i < num_alunos; i++) {
        printf("\nAluno %d\n", i + 1);
        printf("Matricula: ");
        scanf("%d", &alunos[i].matricula);
        printf("Sobrenome: ");
        scanf("%s", alunos[i].sobrenome);
        printf("Ano de nascimento: ");
        scanf("%d", &alunos[i].ano_nascimento);
    }

    printf("\nDados dos alunos cadastrados:\n");
    for (int i = 0; i < num_alunos; i++) {
        printf("\nAluno %d\n", i + 1);
        printf("Matricula: %d\n", alunos[i].matricula);
        printf("Sobrenome: %s\n", alunos[i].sobrenome);
        printf("Ano de nascimento: %d\n", alunos[i].ano_nascimento);
    }

    free(alunos);

    return 0;
}


Ex10

#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int codigo;
    char nome[51];
    int quantidade;
    float preco_venda;
} Produto;

int main() {
    int N;

    printf("Digite o numero de produtos: ");
    scanf("%d", &N);

    Produto *produtos = (Produto *)malloc(N * sizeof(Produto));

    if (produtos == NULL) {
        printf("Erro ao alocar memoria.\n");
        return 1;
    }

    for (int i = 0; i < N; i++) {
        printf("\nProduto %d\n", i + 1);
        printf("Codigo: ");
        scanf("%d", &produtos[i].codigo);
        printf("Nome: ");
        scanf(" %[^\n]", produtos[i].nome);
        printf("Quantidade disponivel: ");
        scanf("%d", &produtos[i].quantidade);
        printf("Preco de venda: ");
        scanf("%f", &produtos[i].preco_venda);
    }

    Produto *produto_maior_preco = &produtos[0];
    Produto *produto_maior_quantidade = &produtos[0];

    for (int i = 1; i < N; i++) {
        if (produtos[i].preco_venda > produto_maior_preco->preco_venda) {
            produto_maior_preco = &produtos[i];
        }
        if (produtos[i].quantidade > produto_maior_quantidade->quantidade) {
            produto_maior_quantidade = &produtos[i];
        }
    }

    printf("\nProduto com maior preco de venda:\n");
    printf("Codigo: %d\n", produto_maior_preco->codigo);
    printf("Nome: %s\n", produto_maior_preco->nome);
    printf("Quantidade: %d\n", produto_maior_preco->quantidade);
    printf("Preco de venda: %.2f\n", produto_maior_preco->preco_venda);

    printf("\nProduto com maior quantidade disponivel:\n");
    printf("Codigo: %d\n", produto_maior_quantidade->codigo);
    printf("Nome: %s\n", produto_maior_quantidade->nome);
    printf("Quantidade: %d\n", produto_maior_quantidade->quantidade);
    printf("Preco de venda: %.2f\n", produto_maior_quantidade->preco_venda);

    free(produtos);

    return 0;
}
